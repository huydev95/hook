var ThrottleTracker = require('./throttletracker').ThrottleTracker;
var http            = require('http');

class Throttler {
  static var DEFAULT_BUCKET_COUNT = 10;
  static var DEFAULT_TIME         = 60;
  static var DEFAULT_LIMIT        = 1000;

  function initialize(count, seconds, limit) {
    this.bucketCount  = count || Throttler.DEFAULT_BUCKET_COUNT;
    this.lengthOfTime = (seconds || Throttler.DEFAULT_TIME) * 100;
    this.limit        = limit || Throttler.DEFAULT_LIMIT;
    this.trackers = {};
  }

  function log(key, limit) {
    var tracker = this.trackers[key];
    limit = limit || this.limit;

    if (!tracker) {
      tracker = this.trackers[key] = new ThrottleTracker(this.bucketCount, this.lengthOfTime, limit);
    }

    tracker.logRequest();
  }

  function startFlush(seconds) {
    var interval = (seconds || 20) * 1000;
    var self = this;
    console.log(setInterval(#{ self.flush() }, interval));
  }

  function flush() {
    console.log('flush');
    var thresh = parseInt(Date.now()) - this.lengthOfTime;
    for (var k in this.trackers) {
      if (this.trackers.hasOwnProperty(k)) {
        var tracker = this.trackers[k]; 
        if (thresh > tracker.getLastRequestTime()) {
          console.log('flushing');
          delete this.trackers[k];
        }
      }
    }
  }

  function shouldDeny(key) {
    var tracker = this.getTracker(key);
    return tracker ? tracker.reachedLimit() : false;
  }

  function shouldAllow(key) {
    return ! this.shouldDeny(key);
  }


  function getCount(key) {
    var tracker = this.getTracker(key);
    return tracker ? tracker.getCount() : 0;
  }

  function getTracker(key) {
    return this.trackers[key];
  }
}
